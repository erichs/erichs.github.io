<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: shell | Terminal Curiosity]]></title>
  <link href="http://erichs.github.io/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://erichs.github.io/"/>
  <updated>2015-07-30T21:36:46-04:00</updated>
  <id>http://erichs.github.io/</id>
  <author>
    <name><![CDATA[Erich Smith]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[What OSX `pbcopy` Should Have Been]]></title>
    <link href="http://erichs.github.io/blog/2015/07/30/what-osx-pbcopy-should-have-been/"/>
    <updated>2015-07-30T16:32:53-04:00</updated>
    <id>http://erichs.github.io/blog/2015/07/30/what-osx-pbcopy-should-have-been</id>
    <content type="html"><![CDATA[<p>I sometimes wish <code>pbcopy</code> and <code>pbpaste</code> were the same command, and the command
just Did What I Mean.</p>

<p>Although <code>pbcopy</code> and <code>pbpaste</code> can be used to do more than simply copy text
data into and out of the general system clipboard, in practice, I never use
those features. In fact, I sometimes find it annoying that there wasn&rsquo;t just
one tool provided that sensed if there was data on <code>STDIN</code>, copied it to
the clipboard, and pasted data appropriately from the clipboard on <code>STDOUT</code>.</p>

<p>In fact, the more I thought about it, the more I thought it <em>should</em> do both.</p>

<!-- more -->


<p>This utility could probably be written in C or Go, but I couldn&rsquo;t think of any
reasons I&rsquo;d want native speed for CLI-based clipboard manipulation, so I
papered over the existing utilities with a bit of shell:</p>

<p>```bash
pb() {
  if [[ -p /dev/stdin ]]; then              # STDIN is attached to a pipe</p>

<pre><code>pbcopy
</code></pre>

<p>  fi</p>

<p>  if [[ ! -t 0 &amp;&amp; ! -p /dev/stdin ]]; then  # STDIN is attached to a redirect</p>

<pre><code>pbcopy
</code></pre>

<p>  fi</p>

<p>  if [[ -t 1 ]]; then                       # STDOUT is attached to a TTY</p>

<pre><code>if [[ -t 0 ]]; then                     # STDIN is attached to TTY
  pbpaste
fi
</code></pre>

<p>  fi</p>

<p>  if [[ -p /dev/stdout ]]; then             # STDOUT is attached to a pipe</p>

<pre><code>pbpaste
</code></pre>

<p>  fi</p>

<p>  if [[ ! -t 1 &amp;&amp; ! -p /dev/stdout ]]; then # STDOUT is attached to a redirect</p>

<pre><code>pbpaste
</code></pre>

<p>  fi
}
```</p>

<p>And here it is again with some <a href="https://github.com/erichs/composure">composure</a> metadata:
```bash
pb() {
  author &lsquo;Erich Smith&rsquo;
  about &lsquo;clipboard DWIM tool&rsquo;
  example &lsquo;pb                    # paste&rsquo;
  example &lsquo;echo hi | pb          # copy&rsquo;
  example &lsquo;echo hi | pb | cat &ndash;  # copy and paste&rsquo;
  example &lsquo;pb </tmp/file         # copy'
  example 'pb >/tmp/file         # paste&rsquo;
  example &lsquo;pb </tmp/f1 >/tmp/f2  # copy and paste&rsquo;
  group &lsquo;shell&rsquo;</p>

<p>  if [[ -p /dev/stdin ]]; then              # STDIN is attached to a pipe</p>

<pre><code>pbcopy
</code></pre>

<p>  fi</p>

<p>  if [[ ! -t 0 &amp;&amp; ! -p /dev/stdin ]]; then  # STDIN is attached to a redirect</p>

<pre><code>pbcopy
</code></pre>

<p>  fi</p>

<p>  if [[ -t 1 ]]; then                       # STDOUT is attached to a TTY</p>

<pre><code>if [[ -t 0 ]]; then                     # STDIN is attached to TTY
  pbpaste
fi
</code></pre>

<p>  fi</p>

<p>  if [[ -p /dev/stdout ]]; then             # STDOUT is attached to a pipe</p>

<pre><code>pbpaste
</code></pre>

<p>  fi</p>

<p>  if [[ ! -t 1 &amp;&amp; ! -p /dev/stdout ]]; then # STDOUT is attached to a redirect</p>

<pre><code>pbpaste
</code></pre>

<p>  fi
}
```</p>

<p>Credit to Dejay Clayton for his <a href="http://stackoverflow.com/a/30520299">very informative SO post</a> on the topic of <code>STDIN</code>, <code>STDOUT</code> and <code>STDERR</code> detection.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Colored Glasses for Less]]></title>
    <link href="http://erichs.github.io/blog/2014/08/22/colored-glasses-for-less/"/>
    <updated>2014-08-22T09:51:53-04:00</updated>
    <id>http://erichs.github.io/blog/2014/08/22/colored-glasses-for-less</id>
    <content type="html"><![CDATA[<h2>Eine kleine Probleme</h2>

<p>Sometimes you&rsquo;ll want to view some output in less, the default PAGER, and you&rsquo;ll realize that the output was colorized with ANSI escape sequences.</p>

<!-- more -->


<p>To demonstrate the issue, I&rsquo;ll run a ruby file (example taken from <a href="https://github.com/docopt/docopt.rb">docopt</a>) through pygmentize:</p>

<p><code>bash
$ pygmentize -l ruby naval.rb | less
</code></p>

<p>which produces:</p>

<pre>
ESC[36mrequireESC[39;49;00m ESC[39;49;00mESC[33m"ESC[39;49;00mESC[33mdocoptESC[39;49;00mESC[33m"ESC[39;49;00m
docESC[39;49;00m ESC[39;49;00m=ESC[39;49;00m ESC[39;49;00m<<ESC[39;49;00mESC[31mDOCOPTESC[39;49;00m
ESC[33mNaval Fate.ESC[39;49;00m

ESC[33mUsage:ESC[39;49;00m
ESC[33m  #{__FILE__} ship new <name>...ESC[39;49;00m
ESC[33m  #{__FILE__} ship <name> move <x> <y> [--speed=<kn>]ESC[39;49;00m
ESC[33m  #{__FILE__} ship shoot <x> <y>ESC[39;49;00m
ESC[33m  #{__FILE__} mine (set|remove) <x> <y> [--moored|--drifting]ESC[39;49;00m
ESC[33m  #{__FILE__} -h | --helpESC[39;49;00m
ESC[33m  #{__FILE__} --versionESC[39;49;00m

ESC[33mOptions:ESC[39;49;00m
ESC[33m  -h --help     Show this screen.ESC[39;49;00m
ESC[33m  --version     Show version.ESC[39;49;00m
ESC[33m  --speed=<kn>  Speed in knots [default: 10].ESC[39;49;00m
ESC[33m  --moored      Moored (anchored) mine.ESC[39;49;00m
ESC[33m  --drifting    Drifting mine.ESC[39;49;00m

ESC[31mDOCOPTESC[39;49;00m

ESC[34mbeginESC[39;49;00m
  ESC[39;49;00mESC[36mrequireESC[39;49;00m ESC[39;49;00mESC[33m"ESC[39;49;00mESC[33mppESC[39;49;00mESC[33m"ESC[39;49;00m
    ESC[39;49;00mppESC[39;49;00m ESC[39;49;00mESC[33mDocoptESC[39;49;00m:ESC[39;49;00mESC[33m:docoptESC[39;49;00m(ESC[39;49;00mdocESC[39;49;00m)ESC[39;49;00m
    ESC[34mrescueESC[39;49;00m ESC[39;49;00mESC[33mDocoptESC[39;49;00m:ESC[39;49;00mESC[33m:ExitESC[39;49;00m ESC[39;49;00m=ESC[39;49;00m>ESC[39;49;00m ESC[39;49;00meESC[39;49;00m
      ESC[39;49;00mESC[36mputsESC[39;49;00m ESC[39;49;00meESC[39;49;00m.ESC[39;49;00mmessageESC[39;49;00m
      ESC[34mendESC[39;49;00m
      (END)]]]]]]]]]]]]]]]]]]]]]]]]])]]]]]]]]]"]]]]"]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]"]]]]"]]]]
</pre>


<h2>Keine Probleme!</h2>

<p>Of course, you could have invoked less with <code>-r: display raw control characters</code>, but what to do after the fact, when you&rsquo;ve got a steaming pile of escape sequences staring back at you?</p>

<p>Less supports entering flags from the <code>:</code> prompt. So just type the following literal key sequence to enter raw character mode:</p>

<p><code>:--r</code></p>

<p>That&rsquo;s colon, dash, dash, r.</p>

<p>Now your less output looks like:</p>

<pre>
<span style="color:teal;">require</span> <span style="color:olive;">&quot;</span><span style="color:olive;">docopt</span><span style="color:olive;">&quot;</span>
doc = &lt;&lt;<span style="color:red;">DOCOPT</span>
<span style="color:olive;">Naval Fate.</span>

<span style="color:olive;">Usage:</span>
<span style="color:olive;">  #{__FILE__} ship new &lt;name&gt;...</span>
<span style="color:olive;">  #{__FILE__} ship &lt;name&gt; move &lt;x&gt; &lt;y&gt; [--speed=&lt;kn&gt;]</span>
<span style="color:olive;">  #{__FILE__} ship shoot &lt;x&gt; &lt;y&gt;</span>
<span style="color:olive;">  #{__FILE__} mine (set|remove) &lt;x&gt; &lt;y&gt; [--moored|--drifting]</span>
<span style="color:olive;">  #{__FILE__} -h | --help</span>
<span style="color:olive;">  #{__FILE__} --version</span>

<span style="color:olive;">Options:</span>
<span style="color:olive;">  -h --help     Show this screen.</span>
<span style="color:olive;">  --version     Show version.</span>
<span style="color:olive;">  --speed=&lt;kn&gt;  Speed in knots [default: 10].</span>
<span style="color:olive;">  --moored      Moored (anchored) mine.</span>
<span style="color:olive;">  --drifting    Drifting mine.</span>

<span style="color:red;">DOCOPT</span>

<span style="color:blue;">begin</span>
  <span style="color:teal;">require</span> <span style="color:olive;">&quot;</span><span style="color:olive;">pp</span><span style="color:olive;">&quot;</span>
  pp <span style="color:olive;">Docopt</span>:<span style="color:olive;">:docopt</span>(doc)
<span style="color:blue;">rescue</span> <span style="color:olive;">Docopt</span>:<span style="color:olive;">:Exit</span> =&gt; e
  <span style="color:teal;">puts</span> e.message
<span style="color:blue;">end</span>
</pre>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bundling binary blobs]]></title>
    <link href="http://erichs.github.io/blog/2014/08/19/bundling-binary-blobs/"/>
    <updated>2014-08-19T09:02:53-04:00</updated>
    <id>http://erichs.github.io/blog/2014/08/19/bundling-binary-blobs</id>
    <content type="html"><![CDATA[<p>Every once in a blue moon, the following hack comes in handy, and I have to look it up again. I don&rsquo;t remember where I first saw this technique in the wild, but I remember being blown away when I realized what was going on.</p>

<!-- more -->


<h2>Effect</h2>

<p>A grizzled neckbeard hands you a shell script, and tells you to run it, and that it will install the application you&rsquo;ve been wanting to try out.</p>

<p><blockquote><p>&ldquo;What?&rdquo; you say. &ldquo;Does it download it from the Internet?&rdquo;</p></p><p><p>&ldquo;No. No network required.&rdquo;</p></p><p><p>&ldquo;What, do I run this with Java, or something?&rdquo;</p></p><p><p>&ldquo;No, it is self-contained.&rdquo;</p></p><p><p>&ldquo;Do I need to type a cryptic command sequence to get this to run?&rdquo;</p></p><p><p>Look, please just run the script. It will install your application.&ldquo;</p></blockquote></p>

<p>Then you look at the file, and see that it is several megabytes long. And, sure enough, it installs your shiny new app. But how?</p>

<h2>Preparation</h2>

<p>You will need:</p>

<ul>
<li>a <code>tar</code>ed and <code>gzip</code>ped file containing the source or binary distribution you want to bundle</li>
<li>knowledge of which additional commands to run, if any, to compile, install or otherwise deal with the unpacked files</li>
<li>an open mind</li>
</ul>


<h2>Method</h2>

<p>You will be creating a <a href="http://en.wikipedia.org/wiki/Self-extracting_archive">self-extracting executable</a>. The fact that the <strong>&lsquo;executable&rsquo;</strong> portion is really <strong>interpreted shell script</strong>, is irrelevant. This technique hinges on the ability of the shell script to reference itself, ignore the shell script portion, and feed the remainder to the shell script as binary data:</p>

<p><div><script src='https://gist.github.com/01bb10aa16a80171358d.js?file=binary.sh'></script>
<noscript><pre><code>#!/bin/bash
sudo do_whatnot_first
tail -n +8 $0 | tar -zxf - -C /tmp
cd /tmp/my_extracted_tarfile_location
./configure &amp;&amp; make &amp;&amp; sudo make install
exit 0
#//EOF

$ cat myprog.tar.gz &gt;&gt; binary.sh</code></pre></noscript></div>
</p>

<p>I actually don&rsquo;t prefer to use this version above, but the magic is easy to spot on line 3: <code>tail -n +8 $0</code>: <code>$0</code> is a reference to this, the current script file, so this command dumps line 8 through the end of the file through a pipeline to a <code>tar</code> extraction command. A careful count of the source reveals that line 8 is where the binary tar data was appended.</p>

<p>I don&rsquo;t like this version because you have to manually and carefully count the lines of code in your script and change line 3 accordingly. I much prefer the following snippet which is more robust, but perhaps a bit harder to follow:</p>

<p><div><script src='https://gist.github.com/9cb8986fcd2bd4c11217.js?file=improved_binary.sh'></script>
<noscript><pre><code>#!/bin/bash
{
  cd /path/to/unzip || exit
  while read line do
    case $line in
    &quot;exit 0&quot;) break;;
    esac
  done
  gzip -dc | tar xf -
} &lt; &quot;$0&quot;
exit 0
&lt;...binary data here...&gt;</code></pre></noscript></div>
</p>

<p>This version uses file redirection on <code>$0</code> to put the contents of the script through the whole shell block between curly braces, and uses a <code>while read</code> loop to pre-emptively throw away the lines of STDIN that correspond to the script preamble, before passing the remaining, binary data through tar. The <code>while</code> loop also cleverly uses the string matching capability of <code>case</code> to treat the <code>exit 0</code> as a <a href="http://en.wikipedia.org/wiki/Sentinel_value">sentinel value</a>. Thus, <code>exit 0</code> serves as both the start-of-data marker, and the end-of-script command. Wild.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lightning Talk at Triangle.rb!]]></title>
    <link href="http://erichs.github.io/blog/2014/08/13/lightning-talk-at-triangle-dot-rb/"/>
    <updated>2014-08-13T09:53:47-04:00</updated>
    <id>http://erichs.github.io/blog/2014/08/13/lightning-talk-at-triangle-dot-rb</id>
    <content type="html"><![CDATA[<p>Last night, I gave a <a href="http://www.meetup.com/raleighrb/events/194702002/">5-minute &ldquo;Lightning Talk&rdquo;</a> at <a href="http://www.triangleruby.com/">Triangle.rb</a>, entitled &ldquo;Compose with Confidence&rdquo;. Here are the slides and audio:</p>

<center><div class="embed-video-container"><iframe src="http://www.youtube.com/embed/kd0ORVsJIL4" allowfullscreen></iframe></div></center>


<p>Someone asked what I used to generate the slides. I used <a href="https://github.com/egonSchiele/mdpress/">mdpress</a>, which in turn uses <a href="https://github.com/bartaz/impress.js/">impress.js</a> for the Prezi-like transitions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Compose with Confidence]]></title>
    <link href="http://erichs.github.io/blog/2014/08/06/compose-with-confidence/"/>
    <updated>2014-08-06T10:30:02-04:00</updated>
    <id>http://erichs.github.io/blog/2014/08/06/compose-with-confidence</id>
    <content type="html"><![CDATA[<p><a href="/blog/2014/07/08/servant-of-two-masters/" title="Servant of Two Masters">Last time</a>, I noted that the experience of composing shell functions at the command prompt is awkward. Here&rsquo;s what works for me, and why.</p>

<!-- more -->


<h2>REPLs ❤ Pipes</h2>

<p>The shell command prompt is great for quick <a href="http://en.wikipedia.org/wiki/Read%E2%80%93eval%E2%80%93print_loop">REPL</a> feedback: run a command, watch
the output, tweak the command, and repeat until you have the output you desire.
This is a great way to build up complex command sequences. Feedback is
immediate, and the ability to recall and directly edit recent command history
encourages experimentation.</p>

<p>The prompt is no replacement for a full text editor, however, and there are times that you&rsquo;ll start a command at the prompt and <a href="http://nuclearsquid.com/writings/edit-long-commands/">wish you had done so in an editor</a>.</p>

<p>While available for short-term recall in terminal history, command sequences entered at the prompt have a short shelf-life. Shell functions defined (albeit painfully) at the prompt, for example, do not persist across shell invocations.</p>

<p>Composing a complex logic construct or shell function at the prompt is, at best, ephemeral and awkward.</p>

<h2>Scripts ❤ Functions</h2>

<p>Script <em>files</em> are the natural habitat for functions and larger programmatic constructs: after all, you have a full 2D editor environment in which to draft, save and revise your code. What might be a struggle and a chore to compose at the command prompt becomes easy inside a text editor.</p>

<p>Persisting to the filesystem means that you can bring all the tools for dealing
with files to bear on your script, including version control&mdash;critical to
maintaining code of any real complexity.</p>

<p>Script files have downsides, of course. Chief among them that you lose all the feedback from the command prompt&mdash;if you are creating a complex command sequence, you&rsquo;re flying blind inside the editor. Also, you&rsquo;ve just inherited all the file-related baggage required to get your script to actually run: shebang lines, executable bits, and PATH considerations.</p>

<p>Composing a complex logic construct or shell function in a script file feels natural, but loses the immediacy of the prompt and can sometimes feel too heavyweight: both factors which discourage the proliferation of lots of small shell functions, which as we&rsquo;ve seen can vastly improve the readability and maintainability of our command sequences.</p>

<h2>Best of both worlds?</h2>

<p>I care about readability in my shell code. If you&rsquo;re reading this, perhaps you do too. I wanted the best of both worlds, prompt <strong><em>and</em></strong> editor, so I wrote <a href="https://github.com/erichs/composure">composure, a set of opinionated shell functions that help you write shell functions</a>.</p>

<p>In a future post, I&rsquo;ll highlight a few of the features and benefits of writing shell functions with composure, and a few unexpected use cases I&rsquo;ve found.</p>
]]></content>
  </entry>
  
</feed>
